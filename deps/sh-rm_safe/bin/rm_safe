#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Project: https://github.com/landonb/sh-rm_safe#üóë
# License: MIT

RM_SAFE_TRASH_HOME="${RM_SAFE_TRASH_HOME:-${HOME}}"

# ***

# USYNC: In lieu of sourcing a common lib file, keep
#        the RM_SAFE_FIRST_TRASH environ synced. See:
#           ~/.kit/sh/sh-rm_safe/bin/rm_safe
#           ~/.kit/sh/sh-rm_safe/bin/rm_rotate
set_environs () {
  if ! os_is_macos; then
    RM_SAFE_FIRST_TRASH="${RM_SAFE_FIRST_TRASH:-.trash0}"
    # RM_SAFE_FINAL_TRASH="${RM_SAFE_FINAL_TRASH:-.trash}"
  else
    RM_SAFE_FIRST_TRASH="${RM_SAFE_FIRST_TRASH:-.Trash0}"
    # RM_SAFE_FINAL_TRASH="${RM_SAFE_FINAL_TRASH:-.Trash}"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** <beg boilerplate `source_deps`: ------------------------------|
#                                                                   |

source_deps () {
  local thispth="$1"
  local prefix="."
  local depsnok=false

  _source_it () {
    local prfx="${1:-.}"
    local depd="${2:-.}"
    local file="${3:-.}"
    local path="${prfx}/${depd}/${file}"
    if command -v "${file}" > /dev/null; then
      # Use version found on PATH.
      . "${file}"
    elif [ -f "${path}" ]; then
      # Fallback on local deps/ copy.
      # NOTE: `dash` complains if missing './'.
      . "${path}"
    else
      local depstxt=""
      [ "${prfx}" != "." ] && depstxt="in ‚Äò${prfx}/${depd}‚Äô or "
      >&2 echo "MISSING: ‚Äò${file}‚Äô not found ${depstxt}on PATH."
      depsnok=true
    fi
  }

  # Allow user to symlink executables and not libraries.
  # E.g., `ln -s /path/to/bin/logger.sh /tmp/logger.sh ; /tmp/logger.sh`
  # knows that it can look relative to /path/to/bin/ for sourceable files.
  [ -n "${thispth}" ] && prefix="$(dirname -- "$(realpath -- "${thispth}")")"

  #                                                                 |
  # *** stop boilerplate> ------------------------------------------|

  # https://github.com/landonb/sh-colors
  _source_it "${prefix}" "../deps/sh-colors/bin" "colors.sh"

  _source_it "${prefix}" "." "path_device"

  # *** <more boilerplate: -----------------------------------------|
  #                                                                 |

  ! ${depsnok}
}

#                                                                   |
# *** end boilerplate `source_deps`> -------------------------------|

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# ***

_trace () { :; }
# YOU: Uncomment if you want a few runtime details.
#  _trace () { >&2 echo "$@"; }

_sh_rm_safe_device_filepath_for_path () {
  local file="$1"

  # If file is a symlink, use the device for the directory instead.
  # - For one, `df` exits error and prints 'No such file or directory'
  #   on broken symlink,
  # - But more importantly, `df` deferences the symlink, and the target
  #   might be on a different device than the symlink itself! And the
  #   whole point of device-local trash directories is to avoid copying.
  #   (Not that copying a symlink is expensive, but it's the principle
  #    of the idea!)
  if [ -h "${file}" ]; then
    file="."
  fi

  _sh_rm_safe_device_filepath_for_path_file "${file}"
}

_sh_rm_safe_device_filepath_for_path_file () {
  local file="$1"

  local device_path=""
  local usage_report=""

  # NOTE: We could use awk to get the second line of output, e.g.,
  #   usage_report=$(/bin/df -T "$1")
  #   device_path=$(echo "${usage_report}" | awk 'NR == 2 {for(i=7;i<=NF;++i) print $i}')
  # but it seems easier to me (lb) -- or at least more intuitive -- to use tail-tr-cut.
  # 2020-08-25: (lb): I had `df -T` here, but it's not macOS-compatible: it prints file
  # system type on GNU/Linux, but filters by type on macOS. Also don't use its output here.
  # And switching to `/usr/bin/env df` to avoid any aliasing.
  # - Note that on Linux/Gnu, df prints 6 columns/fields:
  #     Filesystem    1K-blocks  Used  Available  Use%      Mounted on
  #   Note that on macOS/BSD, df prints 9 columns/fields:
  #     Filesystem   512-blocks  Used  Available  Capacity  iused  ifree  %iused  Mounted on
  #   But rather than test `os_is_macos` and/or `os_is_linux`,
  #   we could do some shell pipeline trickery. E.g., consider:
  #     $ echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev
  #     com
  usage_report="$(/usr/bin/env df -- "${file}" | tail -1)"
  if [ $? -eq 0 ]; then
    # Linux df (without -T):
    #   device_path="$(echo "${usage_report}" | tr -s ' ' | cut -d ' ' -f6)"
    # Linux- and macOS-compatible:
    device_path="$(echo "${usage_report}" | tr -s " " | rev | cut -d" " -f1 | rev)"
    _trace "usage_report=${usage_report}"
  else
    # 2020-08-25: Does this happen only on ${file} not found? (lb): I think so.
    if [ ! -L "${file}" ]; then
      # df didn't find file, and file not a symlink.
      echo "WARNING: Using relative path because not a file: ${file}"
    # else, df didn't find symlink because it points at non existent file.
    fi
    # 2020-08-25: (lb): See comment above: I removed `-T` option.
    # 2020-08-25: HAHA: Instead of piping to/out of `rev`, use awk `NF`.
    # - Not sure why, why I was using a more complicated for-loop:
    #     device_path="$( \
    #       /usr/bin/env df -- "$(dirname -- "${file}")" \
    #       | awk 'NR == 2 {for(i=NF;i<=NF;++i) print $i}' \
    #     )"
    # but it occurs to me now this is much simpler:
    device_path="$( \
      /usr/bin/env df -- "$(dirname -- "${file}")" \
      | awk 'NR == 2 {print $NF}' \
    )"
  fi

  _trace "device_path=${device_path}"

  echo "${device_path}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

#  1: Stop processing (and return nonzero) (b/c DEV error (unrecoverable))
RMSAFE_ENSURED_ERROR=1
#  2: Call safe `rm` [rm -i ] on curr item (b/c user chose <r>).
RMSAFE_ENSURED_CONFIRM=2
# 22: Call mean `rm` [rm -rf] on curr item (b/c user chose <R>).
RMSAFE_ENSURED_FORCE_ONE=22
# 32: Call mean `rm` [rm -rf] on all items (b/c user chose <Ra>).
RMSAFE_ENSURED_FORCE_ALL=32
#  4: All set! Remove curr item to path specified by ${TRASH_FS_MOUNT}
#     (which is either device-local or user-home trash).
RMSAFE_ENSURED_TRASH_BIN=4

_sh_rm_safe_ensure_trashdir () {
  local fs_of_item="$1"
  local item_path="$2"
  local nitems_to_go="$3"

  local ensured=0

  if [ -z "${TRASH_FS_MOUNT}" ]; then
    # So caller stops processing and returns error.
    ensured=${RMSAFE_ENSURED_ERROR:-1}

    # This branch happens if _sh_rm_safe_device_filepath_for_path does not
    # find (echo) a device path.
    # - But `df` used to determine the device path: so does this branch ever
    #   happen? This smells like a DEV issue, not the user's.
    # - Note that RM_SAFE_TRASH_HOME must be nonempty, so not here for that
    #   reason.
    >&2 echo "rm_safe: (DEV) ERROR: No $TRASH_FS_MOUNT (‚Äò‚Äô) determined, what gives?"
  elif [ -f "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}" ]; then
    # So caller invokes `rm -i`
    ensured=${RMSAFE_ENSURED_CONFIRM:-2}

    # Similar too Bash v4+ associate array:
    #   if [ -z "${previously_printed_trash_disabled_notice[${fs_of_item}]}" ]; then
    if [ -z "$(eval echo '$'previously_printed_trash_disabled_notice${fs_of_item})" ]; then
      >&2 echo "The trash is disabled on device ‚Äò${fs_of_item}‚Äô"

      # Similar to Bash v4+ associate array:
      #  previously_printed_trash_disabled_notice[${fs_of_item}]="1"
      eval "previously_printed_trash_disabled_notice${fs_of_item}='1'"
    fi
  else
    if [ ! -e "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}" ]; then
      ensured=0
      # 2022-02-14: Choose your poison:
      #  _sh_rm_safe_prompt_missing_trashdir_options_v1 "${fs_of_item}" \
      #    || ensured=$?  # Will be ensured=0 or ensured=3
      _sh_rm_safe_prompt_missing_trashdir_options_v2 \
        "${fs_of_item}" "${item_path}" "${nitems_to_go}" \
        || ensured=$?  # For return values, see #ensured_legend
    fi

    if [ -d "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}" ]; then
      # So caller proceeds normally (and removes item to trash)
      ensured=${RMSAFE_ENSURED_TRASH_BIN:-4}
    fi
  fi

  return ${ensured}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# ISOFF/2024-07-14: Old v1 flow:
#
#   _sh_rm_safe_prompt_missing_trashdir_options_v1 () {
#     local fs_of_item="$1"
#
#     local ensured=0
#
#     # v1 preso option.
#     local echo_boxy=${RM_SAFE_ECHO_BOXY:-true}
#
#     >&2 printf "%b\n" \
#       "No root-level trash found for device ‚Äò$(fg_lavender)${fs_of_item}$(attr_reset)‚Äô"
#
#     local sudo_prefix=""
#
#     if [ "${TRASH_FS_MOUNT}" = "/" ]; then
#       # The file being deleted lives on the root device but the default
#       # trash directory is not on the same device. This could mean the
#       # user has an encrypted home directory. Rather than moving files
#       # to the encrypted space, use an unencrypted trash location, but
#       # make the user do it.
#       # - Note this is not the case that the user has encrypted the
#       #   entire drive. Just their home directory.
#       >&2 echo
#       >&2 echo "No root trash directory ‚Äò/${RM_SAFE_FIRST_TRASH}‚Äô found on root device ‚Äò/‚Äô"
#       >&2 echo
#       >&2 echo "- Possibly because your home is encrypted, good job!"
#       >&2 echo
#
#       sudo_prefix="sudo"
#
#       # <Sigh> Technically this works, because `local` variables from parent
#       # are visible/settable from child functions. But it still feels weird.
#       TRASH_FS_MOUNT=""
#     fi
#
#     if ${echo_boxy}; then
#       printf "%s\n" "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${TRASH_FS_MOUNT//?/‚îÄ}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
#       printf "%s\n" "‚îÇ Create new trash at ‚Äò${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}‚Äô ?   ‚îÇ"
#       printf "%s"   "‚îÇ Create trash? [y/N]:              ${TRASH_FS_MOUNT//?/ }‚îÇ"
#       printf "\r"
#       printf "%s"   "‚îÇ Create trash? [y/N]: "
#     else
#       >&2 printf "%b\n" \
#         "- HINT: To skip this ask: $(fg_lavender)touch ${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}$(attr_reset)"
#       printf "%b" \
#         "rm_safe: create a new trash at ‚Äò$(fg_lavender)${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}$(attr_reset)‚Äô? [y/N] "
#     fi
#
#     read the_choice
#
#     if [ "${the_choice}" != "y" ] && [ "${the_choice}" != "Y" ]; then
#       ensured=3  # So caller asks to move to home-trash; or invokes `rm -i`.
#       if ${echo_boxy}; then
#         >&2 echo "‚îÇ HINT: To disable this ask:        ${TRASH_FS_MOUNT//?/ }‚îÇ"
#         >&2 echo "‚îÇ          touch ${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}            ‚îÇ"
#         >&2 echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${TRASH_FS_MOUNT//?/‚îÄ}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
#       fi
#     else
#       # Parent sets ensured=4 in a later [ -d ].
#       ${sudo_prefix} mkdir -p -- "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}"
#
#       if [ -n "${sudo_prefix}" ]; then
#         sudo chgrp staff "/${RM_SAFE_FIRST_TRASH}"
#         sudo chmod 2775 "/${RM_SAFE_FIRST_TRASH}"
#       fi
#     fi
#
#     return ${ensured}
#   }

# ***

_sh_rm_safe_prompt_missing_trashdir_options_v1_prompt_home_trash () {
  local trash_fs_mount="$1"

  # v1 preso option.
  local echo_boxy=${RM_SAFE_ECHO_BOXY:-true}

  local ensured=3

  if ${echo_boxy}; then
    printf "%s\n" "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${trash_fs_mount//?/‚îÄ}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    printf "%s\n" "‚îÇ Move to main trash at ‚Äò${trash_fs_mount}/${RM_SAFE_FIRST_TRASH}‚Äô ? ‚îÇ"
    printf "%s"   "‚îÇ Move item? [y/N]:                 ${trash_fs_mount//?/ }‚îÇ"
    printf "\r"
    printf "%s"   "‚îÇ Move item? [y/N]: "
  else
    printf "%b" \
      "rm_safe: move item to trash at ‚Äò$(fg_lavender)${trash_fs_mount}/${RM_SAFE_FIRST_TRASH}$(attr_reset)‚Äô? [y/N] "
  fi

  read the_choice

  if ${echo_boxy}; then
    >&2 echo      "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${trash_fs_mount//?/‚îÄ}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
  fi

  if [ "${the_choice}" != "y" ] && [ "${the_choice}" != "Y" ]; then
    ensured=2
  else
    ensured=4
  fi

  return ${ensured}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sh_rm_safe_prompt_missing_trashdir_options_v2 () {
  local fs_of_item="$1"
  local item_path="$2"
  local nitems_to_go="$3"

  _sh_rm_safe_verify_non_root_trash_fs_mount "${TRASH_FS_MOUNT}" ${item_path} ||
    return 1  # ensured=1 stops processing.

  # At this point, "${TRASH_FS_MOUNT}/.trash" does not exist, and is not `/.trash`.
  # - So ask user what they want to do.

  ! ${PREVIOUSLY_PRINTED_MISSING_TRASHDIR_PROMPT} || echo

  _sh_rm_safe_prompt_missing_trashdir_print_notice "${fs_of_item}"

  _sh_rm_safe_prompt_missing_trashdir_print_header "${item_path}"

  _sh_rm_safe_prompt_missing_trashdir_print_options "${TRASH_FS_MOUNT}" "${nitems_to_go}"

  # For return values, see #ensured_legend
  local ensured=0
  _sh_rm_safe_prompt_missing_trashdir_read_choice_and_react "${nitems_to_go}" \
    || ensured=$?

  PREVIOUSLY_PRINTED_MISSING_TRASHDIR_PROMPT=true

  return ${ensured}
}

# ***

# Note that _sh_rm_safe_prompt_missing_trashdir_options_v1 checks
# if [ "${trash_fs_mount}" = "/" ] and, if so, uses `sudo` to
# manage a root-level `/.trash`. But that seems like something user
# should figure out on their own.
# - Note that `trash_fs_mount=/` happens if user is using an encrypted
#   home directory. Otherwise, if user home is not encrypted, a system
#   file (or a path outside user home, but on the same device) will
#   resolve to the main, user-home trash (i.e., RM_SAFE_TRASH_HOME).
#   - So this is indeed a very rare or at least special use case
#     that we shouldn't bother handling.
_sh_rm_safe_verify_non_root_trash_fs_mount () {
  local trash_fs_mount="$1"
  local item_path="$2"

  [ "${trash_fs_mount}" = "/" ] || return 0

  >&2 echo
  >&2 echo "The device-local trash resolved to the root device (‚Äò/‚Äô) for item: ‚Äò${item_path}‚Äô"
  >&2 echo
  >&2 echo "- It's possible that user home is encrypted (good job!), meaning"
  >&2 echo "  the main trash in on a different logical device than this file."
  >&2 echo
  >&2 echo "Because this is a special case, you're on your own. Sorry!"
  >&2 echo

  return 1
}

# ***

_sh_rm_safe_prompt_missing_trashdir_print_notice () {
  local fs_of_item="$1"

  >&2 printf "%b\n" \
    "NOTICE: There's no device trash for ‚Äò$(fg_lavender)${fs_of_item}$(attr_reset)‚Äô"
}

_sh_rm_safe_prompt_missing_trashdir_print_header () {
  local item_path="$1"

  # SYNC_ME: There are 66 spaces between "‚Äò${item_path}‚Äô" and "‚îÇ" if item_path="".
  let "ftype_nspaces = 66 - ${#item_path}"
  local ftype_postfix=""
  # Only print "‚îÇ"  if we're padding, otherwise let path extend past right pipe boundary.
  if [ ${ftype_nspaces} -gt 0 ]; then
    ftype_postfix="$(eval "printf ' %.0s' {1..${ftype_nspaces}}")‚îÇ"
    # CRUMB: Same outcome as another repeat character trick:
    #  let "ftype_nspaces = 66 - ${#item_path} + 1"  # Add one for '‚îÇ'
    #  ftype_postfix="$(eval "printf '%*s' ${ftype_nspaces} '‚îÇ'")"
  fi

  local header="\
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Please choose an option for the item named:                           ‚îÇ
‚îÇ                                                                       ‚îÇ
‚îÇ   ‚Äò${item_path}‚Äô${ftype_postfix}
‚îÇ                                                                       ‚îÇ"

  echo "${header}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sh_rm_safe_prompt_missing_trashdir_print_options () {
  local trash_fs_mount="$1"
  local nitems_to_go="$2"

  local device_trash="${trash_fs_mount}/${RM_SAFE_FIRST_TRASH}"

  local main_trash="${RM_SAFE_TRASH_HOME}/${RM_SAFE_FIRST_TRASH}"

  # ***

  local option_list="d/m/<Enter>/r/R/h"

  local text_move_all_items_to_new_trash="\
‚îÇ       - Will move this item to:                                       ‚îÇ"
  local text_move_this_item_to_main_trash="\
‚îÇ       - Will move this item to:                                       ‚îÇ"
  local option_send_all_to_main_trash=""
  local option_obliterate_all_items=""

  if [ ${nitems_to_go} -gt 0 ]; then
    option_list="d/m/a/<Enter>/r/R/Ra/h"

    text_move_all_items_to_new_trash="\
‚îÇ       - Will move this (and all items) to:                            ‚îÇ"
    text_move_this_item_to_main_trash="\
‚îÇ       - Will move this (and only this) item to:                       ‚îÇ"
    option_send_all_to_main_trash="
‚îÇ                                                                       ‚îÇ
‚îÇ ‚ñ∫ a   Send [a]ll matching items (files & directories) to main trash   ‚îÇ"
    option_obliterate_all_items="
‚îÇ ‚ñ∫ Ra  Choose [Ra] to obliterate all matching items                    ‚îÇ"
  fi

  # ***

  # SYNC_ME: There are 59 spaces between "‚Äò${device_trash}‚Äô" and "‚îÇ" if device_trash="".
  # - E.g.,
  #     ‚îÇ          ‚Äò‚Äô                                                           ‚îÇ
  #                  12345678901234567890123456789012345678901234567890123456789
  let "device_trash_nspaces = 59 - ${#device_trash}"
  local device_trash_postfis=""
  # Only print "‚îÇ"  if we're padding, otherwise let path extend past right pipe boundary.
  if [ ${device_trash_nspaces} -gt 0 ]; then
    device_trash_postfis="$(eval "printf ' %.0s' {1..${device_trash_nspaces}}")‚îÇ"
    # CRUMB: Same outcome as another repeat character trick:
    #  let "device_trash_nspaces = 66 - ${#device_trash} + 1"  # Add one for '‚îÇ'
    #  device_trash_postfis="$(eval "printf '%*s' ${device_trash_nspaces} '‚îÇ'")"
  fi

  # ***

  # SYNC_ME: There are 59 spaces between "‚Äò${main_trash}‚Äô" and "‚îÇ" if main_trash=''.
  # - E.g.,
  #     ‚îÇ          ‚Äò‚Äô                                                           ‚îÇ
  let "main_trash_nspaces = 59 - ${#main_trash}"
  local main_trash_postfis=""
  # Require minimum 1 space so 66-character path name won't look like it ends with "‚îÇ".
  if [ ${main_trash_nspaces} -gt 1 ]; then
    main_trash_postfis="$(eval "printf ' %.0s' {1..${main_trash_nspaces}}")‚îÇ"
    # CRUMB: Same outcome as another repeat character trick:
    #  let "main_trash_nspaces = 66 - ${#main_trash} + 1"  # Add one for '‚îÇ'
    #  main_trash_postfis="$(eval "printf '%*s' ${main_trash_nspaces} '‚îÇ'")"
  fi

  # ***

  local will_create_main_trash=""
  if [ "$(realpath -- "${device_trash}")" = "$(realpath -- "${main_trash}")" ]; then
    will_create_main_trash="\
‚îÇ                                                                       ‚îÇ
‚îÇ       ** Note this will create the trash directory                    ‚îÇ"
  fi

  # ***

  # I had this above ${option_send_all_to_main_trash} but doesn't seem helpful:
  #   ‚îÇ       - (Technically cp & rm because main trash on separate device)   ‚îÇ\

  local options="\
‚îÇ ‚ñ∫ d   Create a new [d]evice trash                                     ‚îÇ
‚îÇ                                                                       ‚îÇ
${text_move_all_items_to_new_trash}
‚îÇ          ‚Äò${device_trash}‚Äô${device_trash_postfis}
‚îÇ                                                                       ‚îÇ
‚îÇ ‚ñ∫ m   Send this item to the [m]ain trash                              ‚îÇ
‚îÇ                                                                       ‚îÇ
${text_move_this_item_to_main_trash}
‚îÇ          ‚Äò${main_trash}‚Äô${main_trash_postfis}\
${option_send_all_to_main_trash}
${will_create_main_trash}
‚îÇ                                                                       ‚îÇ
‚îÇ ‚ñ∫ ‚Ü≥   [<Enter>] is the same as [m]: use main trash for current item   ‚îÇ
‚îÇ                                                                       ‚îÇ
‚îÇ Alternatively, be destructive:                                        ‚îÇ
‚îÇ                                                                       ‚îÇ
‚îÇ ‚ñ∫ r   Choose [r] to call \`command rm -i\` on the current item          ‚îÇ
‚îÇ ‚ñ∫ R   Choose [R] to remove without prompt (\`command rm -rf\`)          ‚îÇ\
${option_obliterate_all_items}
‚îÇ                                                                       ‚îÇ
‚îÇ Or enter [h] for hints on how to avoid this prompt.                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

  echo "${options}"

  echo -n "  ‚õî Please choose an Option [${option_list}]: "
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sh_rm_safe_prompt_missing_trashdir_read_choice_and_react () {
  local nitems_to_go="$1"

  read the_choice

  local device_trash="${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}"

  local main_trash="${RM_SAFE_TRASH_HOME}/${RM_SAFE_FIRST_TRASH}"

  # For return values, see #ensured_legend
  if [ "${the_choice}" = "d" ]; then
    _sh_rm_safe_ensure_trash_dir_with_proper_permissions "${device_trash}"

    return 4  # All set! Tell caller to use ${TRASH_FS_MOUNT}/.trash.
  fi

  if [ "${the_choice}" = "m" ] || [ "${the_choice}" = "" ]; then
    _sh_rm_safe_ensure_trash_dir_with_proper_permissions "${main_trash}"

    # <Sigh> Technically this works, because `local` variables from parent
    # are visible/settable from child functions. But it still feels weird.
    TRASH_FS_MOUNT="${RM_SAFE_TRASH_HOME}"

    # All set! Tell caller to use ${TRASH_FS_MOUNT}/.trash.
    return ${RMSAFE_ENSURED_TRASH_BIN:-4}
  fi

  if [ ${nitems_to_go} -gt 0 ]; then
    if [ "${the_choice}" = "a" ]; then
      TRASH_FS_MOUNT="${RM_SAFE_TRASH_HOME}"
      TRASH_FS_MOUNT_LOCKED=true

      # All set!
      return ${RMSAFE_ENSURED_TRASH_BIN:-4}
    fi
  fi

  if [ "${the_choice}" = "r" ]; then
    # Call gentle `rm -i` on current item.
    return ${RMSAFE_ENSURED_CONFIRM:-2}
  fi

  if [ "${the_choice}" = "R" ]; then
    # Call destructive `rm -rf` on current item.
    return ${RMSAFE_ENSURED_FORCE_ONE:-22}
  fi

  if [ ${nitems_to_go} -gt 0 ]; then
    if [ "${the_choice}" = "Ra" ]; then
      # Call very destructive `rm -rf` on current and remaining items.
      return ${RMSAFE_ENSURED_FORCE_ALL:-32}
    fi
  fi

  if [ "${the_choice}" = "h" ]; then
    _sh_rm_safe_print_missing_trash_fs_mount_hint "${device_trash}"

    return ${RMSAFE_ENSURED_ERROR:-1}
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# USYNC: See same-named fcn. in rm_rotate
_sh_rm_safe_ensure_trash_dir_with_proper_permissions () {
  local trash_dir="$1"

  command mkdir -p -- "${trash_dir}"

  command chmod 700 "${trash_dir}"

  if os_is_macos; then
    # Ensure ~/.Trash0 permissions like ~/.Trash
    # - Though perhaps to 
    command chmod +a "group:everyone deny delete" "${trash_dir}"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sh_rm_safe_print_missing_trash_fs_mount_hint () {
  local device_trash="$1"

  local main_trash="${RM_SAFE_TRASH_HOME}/${RM_SAFE_FIRST_TRASH}"

  local hint="
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  HINT: How to avoid being prompted for items on this logical device:  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

- 1.) To always use a local device trash, choose 'd' or run:

        mkdir -- \"${device_trash}\"

- 2.) To always ignore trash and call \`rm -i\`:

        touch \"${device_trash}\"

- 3.) To always use the main trash (in user home), run:

        ln -s \"${main_trash}\" \\
          \"${device_trash}\"
"

  echo "${hint}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sh_rm_safe_process_items () {
  local fs_of_item="$1"
  local item_path="$2"
  local nitems_to_go="$3"
  local arg_verbose="$4"

  # If user has to be prompted because no device-local trash,
  # a function return value is used to indicate their preference.
  # - `ensured` legend:  #ensured_legend
  #   - v1 prompts (first to create device trash; second to remove to home trash):
  #     - 0: Do nothing.
  #     - 1: Stop processing (and return nonzero).
  #     - 2: Call safe `rm` [rm -i] (b/c either
  #           (a) user created {device-root}/.trash touch-file); or
  #           (b) user rejected create-new-trash prompt and remove-to-home prompt).
  #     - 3: Prompt (again) to remove to home trash (b/c user rejected create-new-trash).
  #     - 4: All set! (Remove to device-local or user-home trash.)
  #   - v2 prompt (one prompt and only one prompt (streamlined UI)):
  #     -  1: Stop processing (and return nonzero) (b/c DEV error (unrecoverable)).
  #     -  2: Call safe `rm` [rm -i ] on curr item (b/c user chose <r>).
  #     - 22: Call mean `rm` [rm -rf] on curr item (b/c user chose <R>).
  #     - 32: Call mean `rm` [rm -rf] on all items (b/c user chose <Ra>).
  #     -  4: All set! Remove curr item to path specified by ${TRASH_FS_MOUNT}
  #             (which is either device-local or user-home trash).
  local ensured=0
  _sh_rm_safe_ensure_trashdir "${fs_of_item}" "${item_path}" "${nitems_to_go}" \
    || ensured=$?

  # ISOFF/2024-07-14: Old v1 flow:
  #
  #   if [ ${ensured} -eq 3 ]; then
  #     # Ask if user wants to move file to home-trash instead.
  #     TRASH_FS_MOUNT="${RM_SAFE_TRASH_HOME}"
  #
  #     ensured=0
  #     _sh_rm_safe_prompt_missing_trashdir_options_v1_prompt_home_trash "${TRASH_FS_MOUNT}" \
  #       || ensured=$?
  #   fi

  if [ ${ensured} -eq ${RMSAFE_ENSURED_CONFIRM:-2} ]; then
    # User specifically not using safety trash on this device; or for this file.
    command rm -i ${arg_verbose} -- "${item_path}"
  elif [ ${ensured} -eq ${RMSAFE_ENSURED_FORCE_ONE:-22} ] \
    || [ ${ensured} -eq ${RMSAFE_ENSURED_FORCE_ALL:-32} ] \
  ; then
    command rm -rf ${arg_verbose} -- "${item_path}"

    # We already printed a prompt. Might as well print a confirmation?
    echo
    >&2 echo "rm_safe: Removed ‚Äò${item_path}‚Äô"

    if [ ${ensured} -eq ${RMSAFE_ENSURED_FORCE_ALL:-32} ]; then
      ARG_RECURSIVE_FORCE=true
    fi
  elif [ ${ensured} -eq ${RMSAFE_ENSURED_TRASH_BIN:-4} ]; then
    # ensured=4 means the trash directory is prepared; move 'deleted' files there.
    local fname=${bname}

    if [ -e "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}/${fname}" ] || \
       [ -h "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}/${fname}" ]; \
    then
      # Add a UUID fragment to generate a unique name.
      fname="${bname}.$(date +%Y_%m_%d_%Hh%Mm%Ss)-$(uuidgen | head -c8)"
    fi

    _trace "command mv ${arg_verbose} -- \\
      \"$(dirname -- "${item_path}")/${bname}\" \\
      \"${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}/${fname}\""

    # If item_path is a symlink and includes a trailing slash, doing a raw mv:
    #  command mv ${arg_verbose} -- "${item_path}" "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}/${fname}"
    # causes a response like:
    #   mv: cannot move ‚Äòsymlink/‚Äô to
    #    ‚Äò/path/to/.trash/symlink.2015_12_03_14h26m51s_179228194‚Äô: Not a directory
    command mv ${arg_verbose} -- \
      "$(dirname -- "${item_path}")/${bname}" \
      "${TRASH_FS_MOUNT}/${RM_SAFE_FIRST_TRASH}/${fname}"
  fi

  [ ${ensured} -ne 1 ] || return ${ensured}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Side-effect: Sets the following vars from the caller:
#
#   ARG_FORCE
#   ARG_VERBOSE
#   N_PATH_ARGS

parse_args () {
  ARG_FORCE=false
  ARG_SAFE=false
  ARG_VERBOSE=""
  N_PATH_ARGS=0

  local end_of_options=false

  for arg in "$@"; do
    if ${end_of_options}; then
      let 'N_PATH_ARGS +=1 '
    else
      # Arg list and "help" snippets from 'rm (GNU coreutils) 8.32'.
      case "${arg}" in
        --)
          end_of_options=true
          ;;
        -s|--safe)
          # rm_safe option to not skip rm_safe when run as root
          ARG_SAFE=true
          ;;
        -f|--force)
          # "ignore nonexistent files and arguments, never prompt"
          ARG_FORCE=true
          ;;
        -i)
          # "prompt before every removal"
          # rm_safe prompts when it's appropriate by default;
          # use `-f` to skip prompt
          ;;
        -I)
          # "prompt once before removing more than three files,
          #  or when removing recursively; less intrusive than -i"
          ;;
        --interactive|--interactive=*)
          # "prompt according to WHEN: never, once (-I),
          #  or always (-i); without WHEN, prompt always"
          ;;
        --one-file-system)
          # "when removing a hierarchy recursively, skip any
          #  directory that is on a file system different from
          #  that of the corresponding command line argument"
          ;;
        --no-preserve-root)
          # "do not treat '/' specially"
          ;;
        --preserve-root|--preserve-root=*)
          # "do not remove '/' (default); with 'all', reject any
          #  command line argument on a separate device from its
          #  parent"
          ;;
        -r|-R|--recursive)
          # "remove directories and their contents recursively"
          ;;
        -d|--dir)
          # "remove empty directories"
          # rm_safe *moves* any directory to the ~/.trash
          ;;
        -v|--verbose)
          # "explain what is being done"
          # rm_safe doesn't currently have lots to say, except
          # its wordy menu prompt when there's do device trash
          ARG_VERBOSE="-v"
          ;;
        --help)
          # "display this help and exit"
          print_help

          return 0
          ;;
        --version)
          # "output version information and exit"
          command rm --version

          return 0
          ;;
        --*)
          # Same as, e.g., `command rm --x`.
          >&2 echo "rm_safe: unrecognized option '${arg}'"
          >&2 echo "Try 'rm --help' for more information."

          return 1
          ;;
        -*)
          for char in $(echo "${arg#-}" | sed -E -e 's/(.)/\1\n/g'); do
            case ${char} in
              f)
                ARG_FORCE=true
                ;;
              i)
                ;;
              I)
                ;;
              r|R)
                ;;
              d)
                ;;
              v)
                ;;
              *)
                # Same as, e.g., `command rm -xz`.
                >&2 echo "rm_safe: unrecognized option '${char}'"
                >&2 echo "Try 'rm --help' for more information."

                return 1
                ;;
            esac
          done
          ;;
        *)
          let 'N_PATH_ARGS +=1 '
          ;;
      esac
    fi
  done

  _trace "rm_safe: $# total args / ${N_PATH_ARGS} file args"
}

# ***

# Side-effect: Sets the following vars from the caller:
#
#   END_OF_OPTIONS

is_a_rm_arg () {
  local arg="$1"

  if ${END_OF_OPTIONS:-false}; then
    return 1
  else
    case "${arg}" in
      --)
        END_OF_OPTIONS=true
        ;;
      -f|--force)
        ;;
      -i)
        ;;
      -I)
        ;;
      --interactive|--interactive=*)
        ;;
      --one-file-system)
        ;;
      --no-preserve-root)
        ;;
      --preserve-root|--preserve-root=*)
        ;;
      -r|-R|--recursive)
        ;;
      -d|--dir)
        ;;
      -v|--verbose)
        ;;
      --help)
        # Unreachable: We would've printed --help and exited already.
        ;;
      --version)
        # Unreachable: We would've printed --version and exited already.
        ;;
      -*)
        # We would've exited already if any -* input was not a known arg.
        # - So this is an -singlechars arg.
        ;;
      *)
        return 1
        ;;
    esac
  fi

  return 0
}

# ***

print_help () {
  echo "rm_safe is a wrapper around \`rm\`"
  echo "--------------------------------"
  command rm --help

  cat <<'EOF'

rm_safe modifies `rm` behavior
------------------------------

rm_safe prefers to move files to a trash dir, e.g., `~/.trash`

It'll move directories automatically and otherwise prefers not
to prompt you

rm_safe recognizes the following `rm` options:
  -f, --force, -v, --verbose, --help, --version

rm_safe ignores the other options, unless -f|--force,
in which case `rm_safe` passes all args to `command rm`
and doesn't do any more processing

rm_safe adds these additional option(s):
  -s, --safe      By default, `sudo rm` is a pass-through and just
                    calls `command rm`
                    
                  Use `rm -s|--safe` to use `rm_safe` as 'root'

                  Note this only works if you define the two aliases:
                    alias sudo='sudo '
                    alias rm='/path/to/rm_safe'
                  - The trailing space in the sudo alias causes
                    `sudo` to use shell alias, if present;
                    otherwise `sudo rm` just calls `/bin/rm`

You can bypass rm_safe easily:
  rm_safe -f ...
Or:
  command rm ...
Will both behave like normal `rm`
EOF
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

rm_safe () {
  local ARG_FORCE=false
  local ARG_SAFE=false
  local ARG_VERBOSE=""
  local N_PATH_ARGS=0

  parse_args "$@" || return 1

  # ***

  # Defer to raw `rm` if `-f|--force`.
  if ${ARG_FORCE:-false}; then
    command rm "$@"

    return 0
  fi

  # Defer to `rm -i` if running as root and not `-s|--safe`.
  if [ $(id -u) -eq 0 ] && ! ${ARG_SAFE:-false}; then
    command rm -i "$@"

    return 0
  fi

  if [ -z "${RM_SAFE_TRASH_HOME}" ]; then
    # We set RM_SAFE_TRASH_HOME in this file, so if here, DEV's fault.
    # - Note we don't allow empty string, either.
    >&2 echo "rm_safe: No \$RM_SAFE_TRASH_HOME (‚Äò‚Äô), what gives?"

    return 1
  fi

  # ***

  rm_safe_run "$@"
}

# ***

# TOO_BASHY: We'll use eval flattened variable tricks instead:
#  declare -A previously_printed_trash_disabled_notice

# echo "RM_SAFE_TRASH_HOME: ${RM_SAFE_TRASH_HOME}"
# The trash can way!
# You can disable the trash by running
#   command rm -rf ~/.trash && touch ~/.trash
# You can make the trash with `mkdir ~/.trash`,
# or run the `rm_safe` command and you'll be prompted.

rm_safe_run () {
  local TRASH_FS_MOUNT=""
  local TRASH_FS_MOUNT_LOCKED=false

  local PREVIOUSLY_PRINTED_MISSING_TRASHDIR_PROMPT=false

  local npath=0
  local nitems_to_go=0
  local END_OF_OPTIONS=false

  local ARG_RECURSIVE_FORCE=false

  local item_path=""

  for item_path in "$@"; do
    # We already processed args, so skip if seen again.
    if is_a_rm_arg "${item_path}"; then
      continue
    fi

    let "npath += 1"
    # This is used by _sh_rm_safe_prompt_missing_trashdir_print_options
    # if -gt 0 to add remove-all options to menu.
    # - Use || true because `let 'foo = 0'` sets $?=1
    let "nitems_to_go = N_PATH_ARGS - npath" \
      || true

    local bname=$(basename -- "${item_path}")
    if [ "${bname}" = "." ] || [ "${bname}" = ".." ]; then
      continue
    fi

    # ***

    # The user can opt-in -rf from _sh_rm_safe_process_items prompt
    if ${ARG_RECURSIVE_FORCE}; then
      command rm -rf ${ARG_VERBOSE} -- "${item_path}"

      continue
    fi

    # ***

    local fs_of_main_trash
    fs_of_main_trash="$(print_fs_of_main_trash)" || return 1

    local fs_of_item
    fs_of_item="$(print_fs_of_item "${item_path}")" || return 1

    set_trash_fs_mount "${fs_of_main_trash}" "${fs_of_item}" "${item_path}"

    # ***

    local keep_processing=0
    # Might set ARG_RECURSIVE_FORCE=true
    _sh_rm_safe_process_items "${fs_of_item}" "${item_path}" "${nitems_to_go}" "${ARG_VERBOSE}" \
      || keep_processing=$?

    if [ ${keep_processing} -ne 0 ]; then
      return ${keep_processing}
    fi
  done
}

# ***

# Resolve device for both the main trash and the file being remove, so we
# can use the trash path on the local device, to avoid copying files (to
# avoid `mv foo ~/.trash` when ~/.trash is a separate logical device,
# which would effectively become `cp foo ~/.trash && rm foo`).

# Note that `path_device` exits nonzero if path not symlink, file, or dir.

print_fs_of_main_trash () {
  local fs_of_main_trash

  fs_of_main_trash="$(path_device "${RM_SAFE_TRASH_HOME}")"

  if [ $? -ne 0 ] || [ "${fs_of_main_trash}" = "" ]; then
    >&2 echo "rm_safe: No device for supposed trash dir. ‚Äò${RM_SAFE_TRASH_HOME}‚Äô"

    return 1
  fi

  _trace "fs_of_main_trash=${fs_of_main_trash}"  # E.g., "/dev/sda2"

  printf "%s" "${fs_of_main_trash}"
}

# ***

print_fs_of_item () {
  local item_path="$1"

  local fs_of_item

  fs_of_item="$(path_device "${item_path}")"

  if [ $? -ne 0 ] || [ "${fs_of_item}" == "" ]; then
    if [ ! -d "${item_path}" ] &&
       [ ! -f "${item_path}" ] &&
       [ ! -h "${item_path}" ]; then
      >&2 echo "rm_safe: Cannot remove ‚Äò${item_path}‚Äô: No such file or directory"
    else
      >&2 echo "rm_safe: ERROR: Could not detect device for item ‚Äò${item_path}‚Äô"
    fi

    return 1
  fi

  _trace "fs_of_item=${fs_of_item}"  # E.g., "/dev/sdb1"

  printf "%s" "${fs_of_item}"
}

# ***

set_trash_fs_mount () {
  local fs_of_main_trash="$1"
  local fs_of_item="$2"
  local item_path="$3"

  if ${TRASH_FS_MOUNT_LOCKED}; then
    return
  fi

  if [ "${fs_of_main_trash}" = "${fs_of_item}" ]; then
    # Indicates that file being remove resides on same device and user-home,
    # so we can remove to the user-home trash.
    #
    # MAYBE: Update this fcn. to support specific trash
    # directories on each device. For now you can specify
    # one specific dir for one drive (generally /home/$LOGNAME/.trash)
    # and then all other drives it's assumed to be at, e.g.,
    # /media/XXX/.trash; logical mount root, e.g., /path/to/encfs/.trash.
    TRASH_FS_MOUNT="${RM_SAFE_TRASH_HOME}"
  else
    TRASH_FS_MOUNT=$(_sh_rm_safe_device_filepath_for_path "${item_path}")
  fi

  _trace "TRASH_FS_MOUNT=${TRASH_FS_MOUNT}"  # E.g., "/dev/sdb1"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

os_is_macos () {
  [ "$(uname)" = "Darwin" ]
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

clear_traps () {
  trap - EXIT INT
}

set_traps () {
  trap -- trap_exit EXIT
  trap -- trap_int INT
}

exit_0 () {
  clear_traps

  exit 0
}

exit_1 () {
  clear_traps

  exit 1
}

trap_exit () {
  clear_traps

  # USAGE: Alert on unexpected error path, so you can add happy path.
  >&2 echo "ALERT: "$(basename -- "$0")" exited abnormally!"
  >&2 echo "- Hint: Enable \`set -x\` and run again..."

  exit 2
}

trap_int () {
  clear_traps

  exit 3
}

# ***

main () {
  set -e

  set_traps

  set_environs

  rm_safe "$@"

  clear_traps
}

source_deps "${BASH_SOURCE[0]}"
unset -f source_deps

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  main "$@"
else
  export -f rm_safe
fi

unset -f main

