#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=sh
# Project: https://github.com/landonb/sh-rm_safe#ðŸ—‘
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Very. Destructive. Remove.

# 2019-04-08: Note: Sometimes you'll want to run `rmrm -- *`,
#   i.e., if any filenames begin with dashes.

# 2019-04-08: This used to be a simple alias:
#
#   alias rmrm='/bin/rm -rf'
#
# but I (lb) want to avoid destructive commands from being
# reachable via up-arrow (because sometimes I alt-tab to
# the wrong terminal window, and then I up-arrow-and-enter
# without thinking!).
# - So now I fiddle with Bash history to store *commented*
#   command, so you cannot accidentally re-execute it!

# 2020-03-14: Moving to own repo, figure I might as well
# check not trying to delete root filesystem or similar.

rmrm () {
  local path
  for path in "$@"; do
    if [ "/" = "${path}" ]; then
      >&2 echo "rmrm: refusing to remove â€˜${path}â€™"

      return 1
    elif [ "." = "${path}" ] || [ ".." = "${path}" ]; then
      # 2020-04-07: MEH: We can continue, right?
      # - My use case is `rmrm .*`, which won't work otherwise.
      # - The behavior is unchanged whether Bash dotglob enabled or not.
      # - Note that /bin/rm will just ignore these, but warn, e.g.,
      #     /bin/rm: refusing to remove '.' or '..' directory: skipping '.'
      #   - This is similar behavior, albeit silent like.
      #  # >&2 echo "Refuse to delete: â€˜${path}â€™"
      #  >&2 echo "rmrm: refusing to remove â€˜${path}â€™"
      #  return 1
      # 2020-04-07: On second thought, I do not want to make this loop
      # more complicated. We'll just let /bin/rm print its message.
      :
    else
      local dirname
      dirname="$(echo "${path}" | sed 's#/\+$##')"

      if [ "${path}" != "${dirname}" ] && [ -h "${dirname}" ]; then
        >&2 echo "rmrm: refusing to remove symlink target via â€˜${path}â€™"

        return 1
      fi
    fi
  done

  command rm -rf -- "$@"

  # Disable (by commenting) the `rmrm` command in the terminal's history.
  #
  # (lb): We could simple delete the history entry, e.g.,
  #
  #           history -d $((HISTCMD-1))
  #           # Also works?:
  #           #   history -d $(history 1)
  #           # (But using HISTCMD reads better.)
  #
  #       but we should leave a harmless breadcrumb instead.
  #
  # Add the user's command to history, but commented!
  #
  # (So that the user at least has a record of their delete,
  # but so that the user does not risk repeating the command
  # accidentally, e.g., from a blindless up-arrow-and-Enter.)
  #
  # NOTE: We cannot simply try to recreate the command, e.g.,
  #         history -s "#rmrm \"$@\""
  #       because Bash will have performed expansion, e.g.,
  #         rmrm -- "*"
  #       will be expanded to all the files in the cur. dir.
  #       So parse the last history entry (which is the current
  #       command, which Bash will replace on the `history -s`).
  #
  # NOTE: The `history` format is, e.g.,
  #         $ history 1
  #         10078  2022-10-24 16:00:23 history 1
  #       Note the first number format is '%5d', so might be space-padded.
  #
  # NOTE: This trick only works if `rmrm` sourced!
  history -s "#$(
    history 1 | /usr/bin/env sed -E 's/^ *[0-9]+ +[-0-9]+ +[:0-9]+ //'
  )"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  rmrm "${@}"
else
  # This is the Happy Path that adds the #history trick.
  export -f rmrm
fi

