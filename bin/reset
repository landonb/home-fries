#!/usr/bin/env sh
# vim:tw=0:ts=2:sw=2:et:norl:ft=sh
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/home-fries#🍟
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# A clear (reset) that's macOS-friendly, and that clears the clipboard.

# Unnecessary tibdit: the normally-optional `function` prefix is required
# before a function named 'reset', e.g., `function reset ()` if the other
# `reset` file is found on PATH, e.g.,:
#   $ ll ~/.local/bin/reset
#   /home/user/.local/bin/reset -> tset*
#   $ ll ~/.local/bin/tset
#   91K /home/user/.local/bin/tset
# which mattered when this function was part of the ~/.bashrc and sourced
# into the user's environment as a function. But now it's a file named
# 'reset', so none of that matters anymore. Hence, unnecessary tidbit.
#
# Note that tset/reset is described by its man page as `terminal initialization`.
#
# There's also a `/home/user/.local/bin/clear`, which clears the screen, sorta
# -- but it leaves one page of scrollback!
#
# On Linux, the reset/tset clears the terminal buffer -- no scrollback --
# but it doesn't work on macOS. Which is what this trick is for.
#
# - Also, I've added a clipboard clearance, everything must go.

reset_screen_the_terminal_scrollback_and_clipboard () {

  # Clear the screen, and then clear the scrollback buffer.
  #
  # - "Terminal supports an extension of the ED (Erase in Display)
  #    escape sequence to erase the scroll-back."
  #
  #     https://apple.stackexchange.com/questions/31872/
  #       how-do-i-reset-the-scrollback-in-the-terminal-via-a-shell-command
  #
  #     ESC [ Ps J
  #
  #       Parameter   Parameter Meaning
  #
  #       0           Erase from the active position to the end of the screen
  #       1           Erase from start of the screen to the active position
  #       2           Erase all of the display
  #
  #    https://www.vt100.net/docs/vt100-ug/chapter3.html#ED

  # See also Edit > Clear Buffer (Cmd-K) in iTerm2.

  # 1st answer to SE.com Q, 63 (up)votes [2020-09-18], is
  # calling `clear` and sending ED command (see above).
  #
  #   alias clear='clear && printf "\\e[3J"'

  # 2nd answer to SE.com Q, 31 (up)votes, suggests Cmd-K
  # (View > Clear scrollback), and even automating with
  # osascript, but a few issues:
  # - This is OS and terminal application dependent; it'd
  #   be better to use a portable, generic shell solution.
  # - The author suggests using an osascript so you can at
  #   least create a shell alias, but the command is still
  #   OS- and application-dependent. E.g.,
  #     osascript -e \
  #       'tell application "System Events" to keystroke "k" using command down'
  # - I've found that osascript is slow.

  # 3rd answer to SE.com Q, 12 (up)votes:
  # - The author suggests chaining CSI commands:
  #   - CSI 2 J (E2): Clear visible.
  #   - CSI 3 J (The "E3 extension"): Clear scrollback.
  #   - CSI 1 ; 1 H (Cursor Position (CUP) command): Cursor to top-left.
  # - I like this version -- it's explicit and seems the most universal.
  # - Also, `clear` on Linux Mint 19.3 seems to clear scrollback back
  #   not visible, but it also scrolls the view so it looks like the
  #   screen is blank, but if you page up, you'll see one screenful
  #   of scrollback. Fail!
  # - Ref:
  #   - See *HISTORY* in `man clear`
  #   - See *XTerm Control Sequences*,
  #     e.g., https://www.x.org/docs/xterm/ctlseqs.pdf
  #   - See *Erase in Display (ED)*
  #     https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences
  #     https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_output_sequences
  #     https://www.vt100.net/docs/vt100-ug/chapter3.html#ED
  # - Meh:
  #   - The CUP default is 1,1, so '\033[1;1H' → '\033[;H' → '\033[H';
  #     also '\033' → '\e', so this could be shortened
  #            printf "\\e[2J\\e[3J\\e[;H"'
  #     but for some reason (compatibility?) I generally prefer \033 over \e.

  # For posterity, here's an earlier tmux-friendly reset I used to use:
  #
  #   if [ -n "${TMUX}" ]; then
  #     alias reset='clear; tmux clear-history; command reset'
  #   fi

  # And remember, too, that readline maps Ctrl-l to clear-screen,
  # but that behaves like `clear` and leaves one page of scrollback,
  # unlike `~/.local/bin/reset` or the magic escape sequence used here.
  # (Though maybe you edited .inputrc and mapped Ctrl-l to this reset.
  #  Such as: `printf '%s\n\n' "Control-l: 'reset\n'" >> ~/.inputrc`)

  printf "\\033[2J\\033[3J\\033[1;1H"

  if type xclip > /dev/null 2>&1; then
    printf '' | xclip -selection clipboard
  elif type pbcopy > /dev/null 2>&1; then
    pbcopy < /dev/null
  else
    >&2 echo "ALERT: Clipboard not cleared (neither xclip nor pbcopy)."
  fi
}

# MEH/2020-12-16 17:53: 'reset' is much quicker to type than 'clear',
# which I never use... and there's also readline's Ctrl-l you can
# wire to reset as well (`Control-l: 'reset\n'`) and so no point to
# alias (nor any point not to alias, I suppose) `clear`. So commented.
#
#  dubs_term_alias_clear_to_reset () {
#    alias clear='reset'
#  }

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  reset_screen_the_terminal_scrollback_and_clipboard
}

main "$@"
unset -f main

