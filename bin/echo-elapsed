#!/bin/sh
# vim:tw=0:ts=2:sw=2:et:norl:ft=sh
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/home-fries#🍟
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# 2020-03-18: PROFILING: Startup around ~1.3 seconds, ~0.9 for core
# home-fries, and ~0.3 private Bashrc.
# - Only a few startup activities still take >0.05 seconds --
#   home_fries_set_path_environ takes around ~0.05 seconds, and
#   home_fries_configure_manpath takes ~0.10 secs. But neither
#   seems obviously easy to make deferrable/lazy-loaded.
#   In any case, without diving too into the weeds and fussing over a million
#   little tasks that takes 0.01 secs. each, I think we're about as efficient
#   as we're gonna get. Unless I'm missing something obvious.
#   - MAGIC: So raising the `threshold` from 0.05 to 0.12, to be less noisy.

echo_elapsed () {
  # MAGIC: Print Profiling info. if sourcing a file takes longer
  #        than this many secs. See previous comment for details.
  local threshold=${HOMEFRIES_PROFILE_THRESHOLD:-0.12}
  # Optional out-opt. Useful on startup. But disabled by default
  # to make calling this command not have to worry about setting
  # a bool.
  ! ${HOMEFRIES_PROFILING:-true} && return
  local time_0="$1"
  local detail="$2"
  local prefix="${3:-Elapsed: }"
  local time_n="$(home_fries_nanos_now)"
  local elapsed_fract_secs="$(echo "(${time_n} - ${time_0})" | bc -l)"
  if [ -z "${HOMEFRIES_PROFILING}" ] || \
     [ $(echo "${elapsed_fract_secs} >= ${threshold}" | bc -l) -eq 1 ] ; \
  then
    local elapsed_secs=$(echo ${elapsed_fract_secs} | xargs printf "%.2f")
    [ -n "${detail}" ] && detail=" / ${detail}"
    echo "${prefix}${elapsed_secs} secs.${detail}"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

this_file_name="echo-elapsed"
shell_sourced () { [ "$(basename -- "$0")" != "${this_file_name}" ]; }
# Note that bash_sourced only meaningful if shell_sourced is true.
bash_sourced () { declare -p FUNCNAME > /dev/null 2>&1; }

if ! shell_sourced; then
  echo_elapsed "${@}"
else
  bash_sourced && export -f echo_elapsed
  unset this_file_name
  unset -f shell_sourced
  unset -f bash_sourced
fi

