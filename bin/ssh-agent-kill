#!/bin/bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=sh
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/home-fries#🍟
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

source_deps () {
  . "${HOMEFRIES_DIR:-${HOME}/.homefries}/deps/sh-logger/bin/logger.sh"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

ps_ssh_agent_all () {
  ps -ef | grep -E -e '\bssh-agent( |$)' | grep -v 'grep'
}

ps_ssh_agent_ids () {
  ps_ssh_agent_all | awk '{print $2}'
}

ssh_agent_kill () {
  # We could try relying on $SSH_AGENT_PID and just call ssh-agent -k, e.g.,
  #
  #   /usr/bin/ssh-agent -k
  #
  # or we could load *our* environment file and try its pid, e.g.,
  #
  #   local sshenv="${HOME}/.ssh/environment"
  #   [ -f "${sshenv}" ] && . "${sshenv}"
  #   /usr/bin/ssh-agent -k
  #
  # but sometimes you have more than one ssh-agent, or maybe the environ
  # no longer matches. So you want a more sure-fire solution. Just `ps`.

  if [ -n "$(ps_ssh_agent_all)" ]; then
    # NOTE: Don't use quotes, so newlines excluded.
    notice Killing: $(ps_ssh_agent_ids)
    ps_ssh_agent_ids | xargs kill
  else
    notice "Skipping: No ssh-agent process(es) found (nothing to kill)"
  fi

  local HOMEFRIES_SSH_ENV="${HOME}/.ssh/environment"
  if [ -f "${HOMEFRIES_SSH_ENV}" ]; then
    notice "Removing: ${HOMEFRIES_SSH_ENV}"
    /bin/rm -f "${HOMEFRIES_SSH_ENV}"
  else
    notice "Skipping: No ${HOMEFRIES_SSH_ENV} file found"
  fi

  if _sak_shell_sourced; then
    notice "Unsetting: SSH_AGENT_PID and SSH_AUTH_SOCK"
    unset -v SSH_AGENT_PID
    unset -v SSH_AUTH_SOCK
  else
    warn "Source this script and call \`ssh_agent_kill\` to clear SSH_* environs:"
    warn "  . \"$0\""
    warn "  ssh_agent_kill"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_sak_this_file_name="ssh-agent-kill"
_sak_shell_sourced () { [ "$(basename -- "$0")" != "${_sak_this_file_name}" ]; }
# Note that _sak_bash_sourced only meaningful if _sak_shell_sourced is true.
_sak_bash_sourced () { declare -p FUNCNAME > /dev/null 2>&1; }

if ! _sak_shell_sourced; then
  LOG_LEVEL=${LOG_LEVEL_DEBUG}
  source_deps
  ssh_agent_kill "$@"
else
  _sak_bash_sourced && export -f ssh_agent_kill
  unset -v _sak_this_file_name
  # unset -f _sak_shell_sourced
  unset -f _sak_bash_sourced
fi

