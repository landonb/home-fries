#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=sh
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/home-fries#🍟
# License: MIT

# USAGE: Call once after logging on.
#
# If you're having issues, you might want to try
# `ssh-agent -k` or use `ps -ef | grep ssh-agent`
# to find and kill existing agents.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

check_dep () {
  if ! command -v $1 > /dev/null 2>&1; then
    >&2 printf '\r%s\n' "WARNING: Missing dependency: ‘$1’"

    false
  else
    true
  fi
}

check_deps () {
  # Verify sh-logger/bin/logger.sh loaded.
  check_dep 'expect' || exit 1
}

source_deps () {
  # CXREF: Console log helpers, `info`, `warn`, `error`, etc.:
  #   https://github.com/landonb/sh-colors
  #   https://github.com/landonb/sh-logger
  . "${HOMEFRIES_DIR:-${HOME}/.homefries}/deps/sh-logger/bin/logger.sh"

  # CXREF: Timing helper, `print_nanos_now`:
  #   https://github.com/landonb/sh-print-nanos-now
  . "${HOMEFRIES_DIR:-${HOME}/.homefries}/deps/sh-print-nanos-now/bin/print-nanos-now.sh"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

gripe_secrets_absent () {
  [ -n "${SSH_SECRETS}" ] && [ -d "${SSH_SECRETS}" ] && return 1
  # We could return and not care if [ ! -z ${SSH_SECRETS+x} ], i.e.,
  # so called could set SSH_SECRETS= to disable. But this script is
  # called deliberately, so we'll tell user how to use it.

  local prev_notice=${SSH_SECRETS_NOTICE:-0}
  SSH_SECRETS_NOTICE="$(print_nanos_now)"
  if [ ${prev_notice} != "0" ]; then
    local now="$(print_nanos_now)"
    if [ "$(echo "(${now} - ${prev_notice}) < 1.0" | bc -l)" -ne 0 ] ; then
      # It's been <1 second since previous notice; don't repeat message so soon.

      return 0
    fi
  fi

  if [ -z "${SSH_SECRETS}" ]; then
    warn 'Undefined: Please set SSH_SECRETS to the secrets path'
  else
    warn "Missing: No directory at SSH_SECRETS: ${SSH_SECRETS}"
  fi

  return 0
}

verify_environment () {
  # Note that EUID is a Bash-ism, so using `id` instead.
  # - Check nonzero ID, i.e., insist that user is not root.
  if [ $(id -u) -eq 0 ]; then
    >&2 warn "ERROR: Please try again as not root"

    return 1
  fi
  # 2020-03-18: (lb): I do not recall why checking TERM matters.
  # - Adding ERROR message, at least I'll know if/when it's called.
  if [ "${TERM}" = "dumb" ]; then
    >&2 warn "ERROR: Not an appropriate context: TERM is ‘dumb’"

    return 1
  fi
  # Pretty obvious: Lacking .ssh/, do nothing.
  if [ ! -e "${HOME}/.ssh" ]; then
    >&2 warn "ERROR: User's ~/.ssh not online; nothing to kick!"

    return 1
  fi

  gripe_secrets_absent && return 1

  # Now we made it!
  return 0
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# See http://help.github.com/working-with-key-passphrases/
HOMEFRIES_SSH_ENV="${HOME}/.ssh/environment"

# Around web you'll also see:
#   eval `ssh-agent -s`
# but we save to a file instead, and source that.
start_agent () {
  /usr/bin/ssh-agent | /usr/bin/env sed 's/^echo/# echo/' > "${HOMEFRIES_SSH_ENV}"

  chmod 600 "${HOMEFRIES_SSH_ENV}"

  # Source the SSH_* environs that the new process emitted.
  . "${HOMEFRIES_SSH_ENV}" > /dev/null

  notice "Initialized new SSH agent"
}

# write_env () {
#   cat << EOF > "${HOMEFRIES_SSH_ENV}"
# # Via ssh-agent-kick!
# SSH_AUTH_SOCK=${SSH_AUTH_SOCK}; export SSH_AUTH_SOCK;
# SSH_AGENT_PID=${SSH_AGENT_PID}; export SSH_AGENT_PID;
# # echo Agent pid ${SSH_AGENT_PID};
# EOF
# }

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

feed_agent () {
  # Look for keys to load. Use cheat PWDs as appropriate.
  local rsa_keys="$(
    command ls ${HOME}/.ssh/*_ed25519 ${HOME}/.ssh/*_rsa 2> /dev/null
  )"
  debug "rsa_keys=\n${rsa_keys}"

  for ssh_keyname in ${rsa_keys}; do
    if ssh_agent_has_key "${ssh_keyname}"; then
      info "ssh-add: ${ssh_keyname} (already present)"

      continue
    fi

    ssh_add_key_possibly_encrypted "${ssh_keyname}"

    if [ $? -eq 0 ]; then
      info "ssh-add: ${ssh_keyname}"
    else
      warn "ssh-add: Failed to add key: ${ssh_keyname}"
    fi
  done
}

ssh_agent_has_key () {
  local ssh_keyname="$1"

  local pub_key_fingerprint
  if ! pub_key_fingerprint="$(ssh-keygen -l -f ${ssh_keyname})"; then
    >&2 error "ERROR: Cannot determine fingerprint: ${ssh_keyname}"

    # Caller already checked that the key exists, so this is unexpected.
    exit 1
  fi

  ssh-add -l | grep -q "^${pub_key_fingerprint}$"
}

ssh_add_key_possibly_encrypted () {
  local ssh_keyname="$1"

  local secret_name="$(basename -- "${ssh_keyname}")"
  local secret_path="${SSH_SECRETS}/${secret_name}"

  verbose "secret_path=${secret_path}"

  if [ -e "${secret_path}" ]; then
    local passphrase="$(cat ${secret_path})"
    ssh_add_key_with_passphrase "${ssh_keyname}" "${passphrase}"
  else
    # Seems odd that ssh-add prints the success message, e.g.,
    # "Identify added: /home/user/.ssh/id_acme", to stderr.
    /usr/bin/ssh-add "${ssh_keyname}" 2> /dev/null
  fi
}

ssh_add_key_with_passphrase () {
  local ssh_keyname="$1"
  local passphrase="$2"

  if ! [ -s "${ssh_keyname}" ]; then
    >&2 error "ERROR: Missing key: ${ssh_keyname}"

    return 1
  fi

  # SAVVY: If passphrase contains a bracket, e.g., "1234[", expect complains:
  #   "missing close-bracket while executing send "1234["
  passphrase="$(echo "${passphrase}" | /usr/bin/env sed -E 's#\[#\\[#g')"

  local response
  response="$( \
    /usr/bin/expect -c " \
      spawn /usr/bin/ssh-add ${ssh_keyname}; \
      expect \"Enter passphrase for ${ssh_keyname}:\"; \
      send \"${passphrase}\n\"; \
      interact ; \
    " 2>&1 1>/dev/null)"
  # OUTPUT, e.g.:
  # spawn /usr/bin/ssh-add /home/user/.ssh/id_acme_ed25519
  # Enter passphrase for /home/user/.ssh/id_acme_ed25519: 
  # Identity added: /home/user/.ssh/id_acme_ed25519 (Acme)

  if [ $? -ne 0 ]; then
    # On error, expect outputs, e.g.,
    #   send: spawn id exp4 not open
    #       while executing
    #   **PASSWORD**\n""
    >&2 error "ERROR: ssh-add failed:"
    # Avoid spewing password out.
    >&2 echo "$(echo "${response}" | sed 's/\"send \"\(.*\)\\n\"\"/\"send \"XXXX\\n\"\"/')"

    return 1
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# 2020-03-27: (lb): I overhauled this script today because... issues.
#
# - A few take-aways:
#
#   - I could not figure out how to tell if we've fed passphrases to
#     ssh-add previously. On inspection, `ssh-add -l` reported the
#     same list of keys before and I after I run this script.
#
#   - I could see that a second ssh-agent gets launched after the first
#     `ssh-add` call, e.g., a `ssh-add -l` will create it.
#
#     E.g., on initial login, mate-session will have started one agent,
#     and `ps` reports:
#
#   user   9264  9249  0 17:25 ?  00:00:00 mate-session
#   user   9346  9264  0 17:25 ?  00:00:00 /usr/bin/ssh-agent /usr/bin/im-launch mate-session
#
#     and then after a simple `ssh-add -l`, the keyring daemon will start
#     another instance, e.g.,
#
#   user   9257     1  0 17:25 ?  00:00:00 /usr/bin/gnome-keyring-daemon --daemonize --login
#   user  11244  9257  0 17:26 ?  00:00:00 /usr/bin/ssh-agent -D -a /run/user/1000/keyring/.ssh
#
#     While I don't quite understand the mechanics of what's happening,
#     it's not really necessary. I used to have this code wired into
#     the session Bashrc, but I've since unwired it, so that I have to
#     call it deliberately.
#
#     As such -- because this script is only called deliberately -- I've
#     added some additional tracing, and removed code that kills ssh-agent
#     or tries to figure out if the passphrases were previously added.
#
#   - Finally, we can expect mate-session to have set the two environs,
#     SSH_AUTH_SOCK and SSH_AGENT_PID. In this code previously, it saved
#     the output of `ssh-agent -s` to ~/.ssh/environment and would source
#     that on session startup; but that should be unnecessary if mate-session
#     is setting the vars for us.

# ***

ps_mate_session_agent () {
  ps -ef |
    grep -e ' /usr/bin/ssh-agent /usr/bin/im-launch mate-session$' |
    grep -v 'grep'
}

is_mate_session_agent_running () {
  ps_mate_session_agent > /dev/null
}

mate_session_agent_pid () {
  ps_mate_session_agent | awk '{print $2}'
}

mate_session_agent_pid_verify () {
  ! is_mate_session_agent_running && return 1

  notice "Detected ‘ssh-agent mate-session’"

  if [ ${SSH_AGENT_PID} -ne $(mate_session_agent_pid) ]; then
    local prefix="mismatch: \$SSH_AGENT_PID != \$(ps ...)"
    warn "${prefix}: ${SSH_AGENT_PID} != $(mate_session_agent_pid)"
    # MAYBE/2020-03-27 19:14: If this path happens, what? We could rewrite
    #   ~/.ssh/environment, but I'd like to understand use case first. I.e.,
    #   wait until you see this warning to know what to do.
    error "I don't know how to proceed!"

    exit 1
  fi

  return 0
}

# ***

ps_gnome_keyring_daemon_agent () {
  ps -ef |
    grep -e " /usr/bin/ssh-agent -D -a /run/user/$(id -u)/keyring/.ssh\$" |
    grep -v 'grep'
}

is_gnome_keyring_daemon_agent_running () {
  ps_gnome_keyring_daemon_agent > /dev/null
}

# gnome_keyring_daemon_agent_pid () {
#   ps_gnome_keyring_daemon_agent | awk '{print $2}'
# }

# ***

ps_by_pid () {
  ps --no-headers -p ${SSH_AGENT_PID}
}

is_running_pid () {
  [ -n "${SSH_AGENT_PID}" ] && ps_by_pid > /dev/null
}

# ***

ps_ssh_agent_all () {
  ps -ef | grep -E -e '\bssh-agent( |$)' | grep -v 'grep'
}

ps_ssh_agent_all_count () {
  ps_ssh_agent_all | wc -l
}

# ***

is_socketed () {
  [ -n "${SSH_AUTH_SOCK}" ] && [ -S ${SSH_AUTH_SOCK} ]
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

verify_or_start_agent () {
  local max_agents=0

  if mate_session_agent_pid_verify; then
    if is_gnome_keyring_daemon_agent_running; then
      notice "Both mate-session and gnome-keyring-daemon ssh-agent agents online"
      max_agents=2
    else
      notice "Only the mate-session ssh-agent agent is online"
      max_agents=1
    fi
  elif is_running_pid; then
    notice "User ssh-agent agent detected (not the mate-session agent)"
    max_agents=1
  elif [ -n "${SSH_AGENT_PID}" ]; then
    info "SSH_AGENT_PID set but no such process (${SSH_AGENT_PID})"
    # SAVVY: This `unset` won't affect user's terminal if this script is
    # called as an executable, as opposed to user sourcing this script and
    # calling the function directly.
    # - If you call this script as an executable, you'll want to source the
    #   new SSH_* environs via `. ~/.ssh/environment`.
    #   - Likewise for other terminals you may already have open.
    unset -v SSH_AGENT_PID
  fi

  local cnt_agents=$(ps_ssh_agent_all_count)
  if [ ${max_agents} -eq 0 ] && [ ${cnt_agents} -eq 1 ]; then
    # See if we dropped a hint for this agent.
    if [ ! -f "${HOMEFRIES_SSH_ENV}" ]; then
      error "ssh-agent running but we don't have its environs: try \`ssh-agent -k\`"

      exit 1
    fi
    . "${HOMEFRIES_SSH_ENV}" > /dev/null
    if ! is_running_pid; then
      error "ssh-agent running but environs file is outdated: try \`ssh-agent -k\`"

      exit 1
    fi
    notice "Solo ssh-agent agent found via our ssh environs file"
    max_agents=1
  fi

  if [ ${max_agents} -ne ${cnt_agents} ]; then
    error "Unexpected ssh-agent count: expected (${max_agents}) != actual (${cnt_agents})"

    echo $(declare -f ps_ssh_agent_all | head -3 | tail -1)" | wc -l"
    ps_ssh_agent_all | wc -l
    ps_ssh_agent_all

    exit 1
  fi

  if [ ${max_agents} -gt 0 ] && ! is_socketed; then
    error "Missing socket: Nothing found at SSH_AUTH_SOCK: ‘${SSH_AUTH_SOCK}’"

    exit 1
  fi

  if [ ${max_agents} -eq 0 ]; then
    start_agent
  fi

  return 0
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

ssh_agent_kick () {
  # USAGE: `ssh_agent_kick` or ssh_agent_kick -v`.
  local old_level=${LOG_LEVEL}
  [ "$1" = "-v" ] && LOG_LEVEL=0 || LOG_LEVEL=${LOG_LEVEL_INFO}

  # 2021-02-20: Oops, for past 11 months, since 08205ac, I was
  # shadowing first check. I repaired it now, so just be aware
  # that when you run this command the next time, this call to
  # `verify_environment` is newish.
  if verify_environment; then
    if verify_or_start_agent; then
      feed_agent
    fi
  fi

  LOG_LEVEL=${old_level}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

check_deps

source_deps

# ***

shell_sourced () {
  # 2020-03-27: Meh. I created an ssh-kick-agent alias, because I kept
  # typing ssh-k<TAB>, but then I realized I only need to call this
  # function from another command I used to load encrypted mounts. So I
  # removed the symlink.
  # - Nonetheless, this checks if $0 is either of these 2 filenames:
  for filename in "ssh-agent-kick" "ssh-kick-agent"; do
    [ "$(basename -- "$0")" = "${filename}" ] && return 1
  done
  true
}
# Note that bash_sourced only meaningful if shell_sourced is true.
bash_sourced () { declare -p FUNCNAME > /dev/null 2>&1; }

if ! shell_sourced; then
  ssh_agent_kick "$@"
else
  bash_sourced && export -f ssh_agent_kick
  unset -v this_file_name
  unset -f shell_sourced
  unset -f bash_sourced
fi

